From 5fd6faae9a1787ade7d5de1d6e82ba56d892b0ce Mon Sep 17 00:00:00 2001
From: arun <arunramkrishna997@gmail.com>
Date: Tue, 9 Jul 2024 00:55:06 -0400
Subject: [PATCH] results, but the plugins looks like old

---
 src/App.tsx   | 29 +++++++++++++++++++++++++----
 src/Graph.tsx | 13 +++++++++++--
 2 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7c8ed01 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { ServerResponse } from 'http';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +24,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +32,36 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    // render only when state is true
+    if (this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    // getting data continously from server
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((ServerResponds: ServerRespond[]) =>{
+        this.setState({
+          data: ServerResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000){
+        clearInterval(interval);
+      }
+    },100);
+
+    // DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+      // this.setState({ data: [...this.state.data, ...serverResponds] });
+    // });
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..e958dee 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,10 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+    // assigning directly to the result 
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -46,9 +49,15 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+      elem.setAttribute('view', 'y line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]'); 
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock": "distinct count", "top ask price": "avg", "top_bid_price":"avg", "timestamp": "distinct count"}');
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+        
     }
   }
 
-- 
2.44.0.windows.1

